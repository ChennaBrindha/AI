from queue import PriorityQueue

def a_star(graph, heuristics, start, goal):
    pq = PriorityQueue()
    pq.put((0 + heuristics[start], 0, start, [start]))  # (f = g+h, g, current, path)

    while not pq.empty():
        f, g, node, path = pq.get()

        if node == goal:
            print("A* Path:", " -> ".join(path))
            print("Total Cost:", g)
            return

        for neighbor, cost in graph[node]:
            new_g = g + cost
            new_f = new_g + heuristics[neighbor]
            pq.put((new_f, new_g, neighbor, path + [neighbor]))

# Example graph and heuristics
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 3), ('D', 1)],
    'C': [('E', 2)],
    'D': [('E', 1)],
    'E': []
}

heuristics = {
    'A': 7,
    'B': 6,
    'C': 2,
    'D': 1,
    'E': 0
}

a_star(graph, heuristics, 'A', 'E')
